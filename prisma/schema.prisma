generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ------------------------------------------------------
/// CORE USER & ROLE
/// ------------------------------------------------------
model User {
  id                 String                   @id @default(uuid())
  email              String                   @unique
  name               String
  fullName           String?
  username           String?                  @unique
  website            String?
  passwordHash       String?
  originDomain       String?
  stylePreference    Json?
  roleId             String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  logs               ActivityLog[]
  createdDashboards  Dashboard[]
  dashboards         DashboardAssignment[]
  invitationsSent    Invitation[]             @relation("InvitationSender")
  menuEntries        MenuEntry[]              @relation("UserMenuEntries")
  menuPermissions    MenuPermission[]
  organizations      Organization[]           @relation("OrganizationCreator")
  invitedMemberships OrganizationMembership[] @relation("InvitationSender")
  memberships        OrganizationMembership[]
  createdRoles       Role[]                   @relation("RoleCreatedBy")
  role               Role?                    @relation(fields: [roleId], references: [id])
  uiSettings         UserUiSetting?
  workspaces         WorkspaceAssignment[]
}

model Role {
  id          String                @id @default(uuid())
  name        String                @unique
  description String?
  createdById String?
  createdAt   DateTime              @default(now())
  dashboards  DashboardAssignment[]
  permissions MenuPermission[]
  createdBy   User?                 @relation("RoleCreatedBy", fields: [createdById], references: [id])
  users       User[]
  workspaces  WorkspaceAssignment[]
}

/// ------------------------------------------------------
/// ORGANIZATION / COMPANY / INSTITUTION
/// ------------------------------------------------------
model Organization {
  id          String                   @id @default(uuid())
  name        String
  type        OrgType                  @default(COMPANY)
  plan        PlanType                 @default(FREE)
  createdById String?
  domainId    String?                  @unique
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  dashboards  Dashboard[]
  invitations Invitation[]
  orgRoles    OrgRole[]
  createdBy   User?                    @relation("OrganizationCreator", fields: [createdById], references: [id])
  domain      ExternalDomain?          @relation(fields: [domainId], references: [id], onDelete: Cascade)
  memberships OrganizationMembership[]

  @@unique([name, createdById])
}

model OrganizationMembership {
  id             String           @id @default(uuid())
  userId         String
  organizationId String
  orgRoleId      String?
  status         MembershipStatus @default(PENDING)
  invitedById    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  invitedBy      User?            @relation("InvitationSender", fields: [invitedById], references: [id])
  orgRole        OrgRole?         @relation(fields: [orgRoleId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
}

model OrgRole {
  id             String                   @id @default(uuid())
  name           String
  description    String?
  organizationId String
  permissions    Json
  invitations    Invitation[]
  organization   Organization             @relation(fields: [organizationId], references: [id])
  memberships    OrganizationMembership[]

  @@unique([name, organizationId])
}

model Invitation {
  id             String           @id @default(uuid())
  organizationId String
  email          String
  token          String           @unique
  roleId         String?
  senderId       String?
  status         InvitationStatus @default(SENT)
  createdAt      DateTime         @default(now())
  expiresAt      DateTime
  organization   Organization     @relation(fields: [organizationId], references: [id])
  orgRole        OrgRole?         @relation(fields: [roleId], references: [id])
  sender         User?            @relation("InvitationSender", fields: [senderId], references: [id])

  @@unique([email, organizationId])
}

/// ------------------------------------------------------
/// DASHBOARD / WORKSPACE / MENU CORE
/// ------------------------------------------------------
model Dashboard {
  id              String                @id @default(uuid())
  name            String
  description     String?
  organizationId  String?
  createdById     String?
  createdAt       DateTime              @default(now())
  createdBy       User?                 @relation(fields: [createdById], references: [id])
  organization    Organization?         @relation(fields: [organizationId], references: [id])
  assignments     DashboardAssignment[]
  externalDomains ExternalDomain[]  menuUsages      MenuUsage[]
  workspaces      Workspace[]

  @@unique([name, organizationId])
  @@unique([name, createdById])
}

model DashboardAssignment {
  id          String    @id @default(uuid())
  userId      String
  dashboardId String
  roleId      String?
  createdAt   DateTime  @default(now())
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
  role        Role?     @relation(fields: [roleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, dashboardId])
}

model Workspace {
  id          String                @id @default(uuid())
  name        String
  description String?
  dashboardId String
  createdAt   DateTime              @default(now())
  menuUsages  MenuUsage[]
  dashboard   Dashboard             @relation(fields: [dashboardId], references: [id])
  assignments WorkspaceAssignment[]

  @@unique([name, dashboardId])
}

model WorkspaceAssignment {
  id          String    @id @default(uuid())
  userId      String
  workspaceId String
  roleId      String?
  createdAt   DateTime  @default(now())
  role        Role?     @relation(fields: [roleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model MenuItem {
  id            String           @id @default(uuid())
  title         String
  type          String
  icon          String?
  target        String?
  globalContext Boolean          @default(false)
  parentId      String?
  createdAt     DateTime         @default(now())
  dataSources   MenuDataSource?
  entries       MenuEntry[]
  parent        MenuItem?        @relation("SubMenu", fields: [parentId], references: [id])
  children      MenuItem[]       @relation("SubMenu")
  permissions   MenuPermission[]
  usages        MenuUsage[]

  @@unique([title, parentId])
}

model MenuUsage {
  id          String     @id @default(uuid())
  menuId      String
  dashboardId String?
  workspaceId String?
  orderIndex  Int?
  dashboard   Dashboard? @relation(fields: [dashboardId], references: [id])
  menu        MenuItem   @relation(fields: [menuId], references: [id])
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@unique([menuId, workspaceId])
  @@unique([menuId, dashboardId, workspaceId])
}

model MenuPermission {
  id             String   @id @default(uuid())
  menuId         String
  roleId         String?
  userId         String?
  permissionType String
  menu           MenuItem @relation(fields: [menuId], references: [id])
  role           Role?    @relation(fields: [roleId], references: [id])
  user           User?    @relation(fields: [userId], references: [id])

  @@unique([menuId, roleId])
  @@unique([menuId, userId])
}

model MenuDataSource {
  id                  String   @id @default(uuid())
  menuId              String   @unique
  sourceTable         String
  filterByWorkspaceId Boolean  @default(false)
  filterByUserId      Boolean  @default(false)
  menu                MenuItem @relation(fields: [menuId], references: [id])
}

/// DYNAMIC DATA STORAGE (MENU ENTRIES)
/// ------------------------------------------------------
model MenuEntry {
  id          String   @id @default(uuid())
  menuId      String
  userId      String
  workspaceId String?
  dashboardId String?
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menu        MenuItem @relation(fields: [menuId], references: [id])
  user        User     @relation("UserMenuEntries", fields: [userId], references: [id])
}

/// ------------------------------------------------------
/// EXTERNAL DOMAIN & LOGS
/// ------------------------------------------------------
model ExternalDomain {
  id                 String        @id @default(uuid())
  domainName         String        @unique
  description        String?
  createdAt          DateTime      @default(now())
  organization       Organization?
}

model UserUiSetting {
  id                 String   @id @default(uuid())
  userId             String   @unique
  fontSize           String?
  colorTheme         String?
  layoutMode         String?
  additionalSettings Json?
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum OrgType {
  COMPANY
  INSTITUTION
  FAMILY
  OTHER
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REVOKED
}

enum InvitationStatus {
  SENT
  ACCEPTED
  EXPIRED
  CANCELLED
}
